[project]
name = "domain-drivers"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "attrs>=25.1.0",
    "factory-boy>=3.3.3",
    "frozendict>=2.4.6",
    "python-dateutil>=2.9.0.post0",
    "types-factory-boy>=0.4.1",
    "types-python-dateutil>=2.9.0.20241206",
]

[tool.ruff]
show-fixes = true
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D100", # Missing module docstring
    "D101",  # Missing class docstring
    "D102",  # Missing function or method docstring
    "D103",  # Missing docstring in public class
    "D104",  # Missing docstring in public package
    "D105",  # Missing module docstring
    "D106",  # Missing docstring in public nested class
    "D107",  # Missing docstring in '__init__'
    "D203",  # Incorrect blank line before class. Incompatible with D211
    "D213",  # Multi line summary first line. Incompatible with D213,
    "COM812",  # Missing trailing comma. Ensured by formatter.
]

[tool.ruff.lint.per-file-ignores]
"**test**" = [
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR0913",  # Too many arguments in function definition (>5)
    "PLR2004",  # Magic value used in comparison
    "S101",  # Use of assert detected (hint: use `if __debug__: ...` instead)
    "TID252",  # Prefer absolute imports over relative imports from parent modules
]


[dependency-groups]
dev = [
    "basedpyright>=1.28.4",
    "mypy>=1.15.0",
    "pytest>=8.3.4",
    "ruff>=0.9.9",
]

[tool.basedpyright]
include = ["schedule"]
exclude = [
    "**/test**",
    "**/tests/**",
    "schedule/shared/typing_extensions/comparable.py"
]

reportMissingImports = "error"
reportMissingTypeStubs = true
typeCheckingMode = "all"

pythonVersion = "3.13"
pythonPlatform = "Linux"


[tool.mypy]
python_version = "3.13"
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true
exclude = [
    ".*test_.*",
    ".*tests/.*.*"
]
